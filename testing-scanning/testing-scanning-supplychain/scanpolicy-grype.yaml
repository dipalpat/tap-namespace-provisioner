#! This file contains a Grype Scan policy which blocks the supply chain if your workload has Critical, High or UnknownSeverity CVEs
#! in your source code or image.
#@ load("@ytt:data", "data")
#@ def in_list(key, list):
#@  return hasattr(data.values.tap_values, key) and (data.values.tap_values[key] in list)
#@ end
#! This if condition ensures that this scan policy is only created if the supply chain is testing_scanning and the TAP profile used is full or build.
#@ if/end in_list('supply_chain', ['testing_scanning']) and in_list('profile', ['full', 'build']):
#! ---
#! apiVersion: apiextensions.k8s.io/v1
#! kind: CustomResourceDefinition
#! metadata:
#!   name: scanpolicies.scanning.apps.tanzu.vmware.com
#!   annotations:
#!     kapp.k14s.io/change-group: scanning-crd
#!     kapp.k14s.io/exists: ""
#! spec:
#!   scope: Namespaced
#!   group: scanning.apps.tanzu.vmware.com
#!   versions:
#!     - name: v1beta1
#!   names:
#!     kind: ScanPolicy
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
#!  annotations:
#!    kapp.k14s.io/change-rule.0: "upsert after upserting scanning-crd"
  name: scan-policy
  labels:
    'app.kubernetes.io/part-of': 'scan-system'
spec:
  regoFile: |
    package main
    # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
    notAllowedSeverities := ["Critical", "High", "UnknownSeverity"]
    ignoreCves := ["GHSA-36p3-wjmg-h94x", "CVE-2023-21930", "GHSA-mjmj-j48q-9wg2", "CVE-2023-35116", "CVE-2023-33126", "CVE-2023-33128", "CVE-2023-33135", "GHSA-555c-2p6r-68mm", "GHSA-jx7q-xxmw-44vf"]
    contains(array, elem) = true {
      array[_] = elem
    } else = false { true }
    isSafe(match) {
      severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
      some i
      fails := contains(notAllowedSeverities, severities[i])
      not fails
    }
    isSafe(match) {
      ignore := contains(ignoreCves, match.id)
      ignore
    }
    deny[msg] {
      comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
      some i
      comp := comps[i]
      vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
      some j
      vuln := vulns[j]
      ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
      not isSafe(vuln)
      msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
    }